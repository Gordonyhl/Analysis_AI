-- Schema for conversational threads and messages
--
-- How this file is executed
-- - Auto-runs on first container startup via docker-compose mount:
--     ./db/init -> /docker-entrypoint-initdb.d
-- - Safe to re-run due to IF NOT EXISTS guards.
-- - Manual apply to an existing DB (no data loss):
--     cat db/init/001_schema.sql | docker exec -i pydantic_postgres \
--       psql -U "$POSTGRES_USER" -d "$POSTGRES_DB"

-- =========================
-- threads: one row per conversation thread
-- =========================
CREATE TABLE IF NOT EXISTS threads (
    id UUID PRIMARY KEY,                         -- Stable thread identifier (UUID generated by the app)
    title TEXT,                                  -- Optional human-readable title
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()-- Creation timestamp (UTC recommended)
);

-- =========================
-- messages: one row per message within a thread
-- =========================
CREATE TABLE IF NOT EXISTS messages (
    id BIGSERIAL PRIMARY KEY,                    -- Monotonically increasing surrogate key
    thread_id UUID NOT NULL REFERENCES threads(id), -- Owning thread
    idx INTEGER NOT NULL,                        -- Position within thread; strictly increasing per thread (enforce in app)
    role TEXT NOT NULL CHECK (role IN ('user', 'assistant', 'tool')), -- Sender role
    content JSONB,                               -- Exact message payload stored as JSONB
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()-- Insert timestamp
);

-- For fast ordered reads within a thread, e.g.:
--   SELECT ... FROM messages WHERE thread_id = $1 ORDER BY idx;
CREATE INDEX IF NOT EXISTS messages_thread_id_idx_idx ON messages (thread_id, idx);

-- Optional: Prevent duplicate positions per thread at the DB level
-- Uncomment if you want the DB to enforce uniqueness of idx per thread
-- ALTER TABLE messages ADD CONSTRAINT messages_unique_thread_idx UNIQUE (thread_id, idx);


